// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"fmt"
	"io"
	"strconv"

	"github.com/ilmsadmin/Zplus-SaaS/apps/backend/gateway/types"
)

// Base interface for all tenant-scoped entities
type TenantEntity interface {
	IsTenantEntity()
	GetID() string
	GetTenantID() types.TenantID
	GetCreatedAt() string
	GetUpdatedAt() string
}

type AuthPayload struct {
	Token        string `json:"token"`
	RefreshToken string `json:"refreshToken"`
	User         *User  `json:"user"`
	ExpiresIn    int    `json:"expiresIn"`
}

type CRMActivity struct {
	ID          string          `json:"id"`
	TenantID    types.TenantID  `json:"tenantId"`
	Type        CRMActivityType `json:"type"`
	Entity      string          `json:"entity"`
	EntityID    string          `json:"entityId"`
	UserID      string          `json:"userId"`
	User        *User           `json:"user"`
	Description string          `json:"description"`
	Metadata    *string         `json:"metadata,omitempty"`
	Timestamp   string          `json:"timestamp"`
}

type CreateCustomerInput struct {
	Name    string   `json:"name"`
	Email   *string  `json:"email,omitempty"`
	Phone   *string  `json:"phone,omitempty"`
	Address *string  `json:"address,omitempty"`
	Company *string  `json:"company,omitempty"`
	Tags    []string `json:"tags,omitempty"`
	Notes   *string  `json:"notes,omitempty"`
}

type CreateDepartmentInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	ManagerID   *string `json:"managerId,omitempty"`
}

type CreateEmployeeInput struct {
	EmployeeID   string   `json:"employeeId"`
	FirstName    string   `json:"firstName"`
	LastName     string   `json:"lastName"`
	Email        string   `json:"email"`
	Phone        *string  `json:"phone,omitempty"`
	DepartmentID *string  `json:"departmentId,omitempty"`
	Position     string   `json:"position"`
	Salary       *float64 `json:"salary,omitempty"`
	HireDate     string   `json:"hireDate"`
	ManagerID    *string  `json:"managerId,omitempty"`
}

type CreateProductCategoryInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	ParentID    *string `json:"parentId,omitempty"`
}

type CreateProductInput struct {
	Sku         string   `json:"sku"`
	Name        string   `json:"name"`
	Description *string  `json:"description,omitempty"`
	Price       float64  `json:"price"`
	Cost        *float64 `json:"cost,omitempty"`
	Stock       int      `json:"stock"`
	CategoryID  *string  `json:"categoryId,omitempty"`
	Images      []string `json:"images,omitempty"`
}

type CreateRoleInput struct {
	Name          string   `json:"name"`
	Description   *string  `json:"description,omitempty"`
	PermissionIds []string `json:"permissionIds,omitempty"`
}

type CreateUserInput struct {
	Email     string   `json:"email"`
	FirstName string   `json:"firstName"`
	LastName  string   `json:"lastName"`
	Password  string   `json:"password"`
	RoleIds   []string `json:"roleIds,omitempty"`
}

// Customer entity for CRM module
type Customer struct {
	ID        string         `json:"id"`
	TenantID  types.TenantID `json:"tenantId"`
	Name      string         `json:"name"`
	Email     *string        `json:"email,omitempty"`
	Phone     *string        `json:"phone,omitempty"`
	Address   *string        `json:"address,omitempty"`
	Company   *string        `json:"company,omitempty"`
	Status    CustomerStatus `json:"status"`
	Tags      []string       `json:"tags"`
	Notes     *string        `json:"notes,omitempty"`
	CreatedBy *User          `json:"createdBy"`
	CreatedAt string         `json:"createdAt"`
	UpdatedAt string         `json:"updatedAt"`
}

func (Customer) IsTenantEntity()                  {}
func (this Customer) GetID() string               { return this.ID }
func (this Customer) GetTenantID() types.TenantID { return this.TenantID }
func (this Customer) GetCreatedAt() string        { return this.CreatedAt }
func (this Customer) GetUpdatedAt() string        { return this.UpdatedAt }

type CustomerConnection struct {
	Edges      []*CustomerEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

type CustomerEdge struct {
	Node   *Customer `json:"node"`
	Cursor string    `json:"cursor"`
}

type CustomerFilter struct {
	Status    *CustomerStatus  `json:"status,omitempty"`
	Tags      []string         `json:"tags,omitempty"`
	Search    *string          `json:"search,omitempty"`
	DateRange *DateRangeFilter `json:"dateRange,omitempty"`
}

type DateRangeFilter struct {
	From *string `json:"from,omitempty"`
	To   *string `json:"to,omitempty"`
}

// Department for organization structure
type Department struct {
	ID          string         `json:"id"`
	TenantID    types.TenantID `json:"tenantId"`
	Name        string         `json:"name"`
	Description *string        `json:"description,omitempty"`
	Manager     *Employee      `json:"manager,omitempty"`
	Employees   []*Employee    `json:"employees"`
	CreatedAt   string         `json:"createdAt"`
	UpdatedAt   string         `json:"updatedAt"`
}

func (Department) IsTenantEntity()                  {}
func (this Department) GetID() string               { return this.ID }
func (this Department) GetTenantID() types.TenantID { return this.TenantID }
func (this Department) GetCreatedAt() string        { return this.CreatedAt }
func (this Department) GetUpdatedAt() string        { return this.UpdatedAt }

// Employee entity for HRM module
type Employee struct {
	ID         string         `json:"id"`
	TenantID   types.TenantID `json:"tenantId"`
	EmployeeID string         `json:"employeeId"`
	FirstName  string         `json:"firstName"`
	LastName   string         `json:"lastName"`
	Email      string         `json:"email"`
	Phone      *string        `json:"phone,omitempty"`
	Department *Department    `json:"department,omitempty"`
	Position   string         `json:"position"`
	Salary     *float64       `json:"salary,omitempty"`
	HireDate   string         `json:"hireDate"`
	Status     EmployeeStatus `json:"status"`
	Manager    *Employee      `json:"manager,omitempty"`
	CreatedAt  string         `json:"createdAt"`
	UpdatedAt  string         `json:"updatedAt"`
}

func (Employee) IsTenantEntity()                  {}
func (this Employee) GetID() string               { return this.ID }
func (this Employee) GetTenantID() types.TenantID { return this.TenantID }
func (this Employee) GetCreatedAt() string        { return this.CreatedAt }
func (this Employee) GetUpdatedAt() string        { return this.UpdatedAt }

type EmployeeConnection struct {
	Edges      []*EmployeeEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

type EmployeeEdge struct {
	Node   *Employee `json:"node"`
	Cursor string    `json:"cursor"`
}

type EmployeeFilter struct {
	Status     *EmployeeStatus `json:"status,omitempty"`
	Department *string         `json:"department,omitempty"`
	Position   *string         `json:"position,omitempty"`
	Search     *string         `json:"search,omitempty"`
}

type FloatRangeFilter struct {
	Min *float64 `json:"min,omitempty"`
	Max *float64 `json:"max,omitempty"`
}

type HRMActivity struct {
	ID          string          `json:"id"`
	TenantID    types.TenantID  `json:"tenantId"`
	Type        HRMActivityType `json:"type"`
	Entity      string          `json:"entity"`
	EntityID    string          `json:"entityId"`
	UserID      string          `json:"userId"`
	User        *User           `json:"user"`
	Description string          `json:"description"`
	Metadata    *string         `json:"metadata,omitempty"`
	Timestamp   string          `json:"timestamp"`
}

type LiveStats struct {
	TenantID          types.TenantID `json:"tenantId"`
	Timestamp         string         `json:"timestamp"`
	TotalUsers        int            `json:"totalUsers"`
	ActiveUsers       int            `json:"activeUsers"`
	TotalCustomers    int            `json:"totalCustomers"`
	NewCustomersToday int            `json:"newCustomersToday"`
	LeadsCount        int            `json:"leadsCount"`
	TotalEmployees    int            `json:"totalEmployees"`
	EmployeesOnLeave  int            `json:"employeesOnLeave"`
	NewHiresToday     int            `json:"newHiresToday"`
	TotalProducts     int            `json:"totalProducts"`
	LowStockAlerts    int            `json:"lowStockAlerts"`
	SalesToday        float64        `json:"salesToday"`
	StorageUsed       float64        `json:"storageUsed"`
	APIRequestsToday  int            `json:"apiRequestsToday"`
}

type LoginInput struct {
	Email      string `json:"email"`
	Password   string `json:"password"`
	TenantSlug string `json:"tenantSlug"`
}

type Mutation struct {
}

type Notification struct {
	ID        string           `json:"id"`
	TenantID  types.TenantID   `json:"tenantId"`
	UserID    string           `json:"userId"`
	Type      NotificationType `json:"type"`
	Title     string           `json:"title"`
	Message   string           `json:"message"`
	Data      *string          `json:"data,omitempty"`
	Read      bool             `json:"read"`
	CreatedAt string           `json:"createdAt"`
}

type POSActivity struct {
	ID          string          `json:"id"`
	TenantID    types.TenantID  `json:"tenantId"`
	Type        POSActivityType `json:"type"`
	Entity      string          `json:"entity"`
	EntityID    string          `json:"entityId"`
	UserID      string          `json:"userId"`
	User        *User           `json:"user"`
	Description string          `json:"description"`
	Metadata    *string         `json:"metadata,omitempty"`
	Timestamp   string          `json:"timestamp"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type Pagination struct {
	First  *int    `json:"first,omitempty"`
	After  *string `json:"after,omitempty"`
	Last   *int    `json:"last,omitempty"`
	Before *string `json:"before,omitempty"`
}

// Permission system for granular access control
type Permission struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Resource    string  `json:"resource"`
	Action      string  `json:"action"`
	Description *string `json:"description,omitempty"`
}

type PlanFeature struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	Enabled     bool    `json:"enabled"`
}

// Product entity for POS/Inventory
type Product struct {
	ID          string           `json:"id"`
	TenantID    types.TenantID   `json:"tenantId"`
	Sku         string           `json:"sku"`
	Name        string           `json:"name"`
	Description *string          `json:"description,omitempty"`
	Price       float64          `json:"price"`
	Cost        *float64         `json:"cost,omitempty"`
	Stock       int              `json:"stock"`
	Category    *ProductCategory `json:"category,omitempty"`
	Images      []string         `json:"images"`
	Status      ProductStatus    `json:"status"`
	CreatedAt   string           `json:"createdAt"`
	UpdatedAt   string           `json:"updatedAt"`
}

func (Product) IsTenantEntity()                  {}
func (this Product) GetID() string               { return this.ID }
func (this Product) GetTenantID() types.TenantID { return this.TenantID }
func (this Product) GetCreatedAt() string        { return this.CreatedAt }
func (this Product) GetUpdatedAt() string        { return this.UpdatedAt }

type ProductCategory struct {
	ID          string           `json:"id"`
	TenantID    types.TenantID   `json:"tenantId"`
	Name        string           `json:"name"`
	Description *string          `json:"description,omitempty"`
	Parent      *ProductCategory `json:"parent,omitempty"`
	Products    []*Product       `json:"products"`
	CreatedAt   string           `json:"createdAt"`
	UpdatedAt   string           `json:"updatedAt"`
}

func (ProductCategory) IsTenantEntity()                  {}
func (this ProductCategory) GetID() string               { return this.ID }
func (this ProductCategory) GetTenantID() types.TenantID { return this.TenantID }
func (this ProductCategory) GetCreatedAt() string        { return this.CreatedAt }
func (this ProductCategory) GetUpdatedAt() string        { return this.UpdatedAt }

type ProductConnection struct {
	Edges      []*ProductEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

type ProductEdge struct {
	Node   *Product `json:"node"`
	Cursor string   `json:"cursor"`
}

type ProductFilter struct {
	Status     *ProductStatus    `json:"status,omitempty"`
	Category   *string           `json:"category,omitempty"`
	PriceRange *FloatRangeFilter `json:"priceRange,omitempty"`
	Search     *string           `json:"search,omitempty"`
}

type Query struct {
}

// Role-based access control
type Role struct {
	ID          string         `json:"id"`
	TenantID    types.TenantID `json:"tenantId"`
	Name        string         `json:"name"`
	Description *string        `json:"description,omitempty"`
	Permissions []*Permission  `json:"permissions"`
	Users       []*User        `json:"users"`
	CreatedAt   string         `json:"createdAt"`
	UpdatedAt   string         `json:"updatedAt"`
}

func (Role) IsTenantEntity()                  {}
func (this Role) GetID() string               { return this.ID }
func (this Role) GetTenantID() types.TenantID { return this.TenantID }
func (this Role) GetCreatedAt() string        { return this.CreatedAt }
func (this Role) GetUpdatedAt() string        { return this.UpdatedAt }

type RoleConnection struct {
	Edges      []*RoleEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type RoleEdge struct {
	Node   *Role  `json:"node"`
	Cursor string `json:"cursor"`
}

type RoleFilter struct {
	Search *string `json:"search,omitempty"`
}

type Subscription struct {
}

// Subscription plan management
type SubscriptionPlan struct {
	ID       string         `json:"id"`
	Name     string         `json:"name"`
	Price    float64        `json:"price"`
	Features []*PlanFeature `json:"features"`
	MaxUsers *int           `json:"maxUsers,omitempty"`
	Storage  *int           `json:"storage,omitempty"`
	Modules  []ModuleType   `json:"modules"`
}

type SystemInfo struct {
	Version     string `json:"version"`
	Environment string `json:"environment"`
	TenantCount int    `json:"tenantCount"`
	Uptime      string `json:"uptime"`
}

type SystemMetrics struct {
	Timestamp         string  `json:"timestamp"`
	CPUUsage          float64 `json:"cpuUsage"`
	MemoryUsage       float64 `json:"memoryUsage"`
	ActiveConnections int     `json:"activeConnections"`
	RequestsPerSecond float64 `json:"requestsPerSecond"`
	ErrorRate         float64 `json:"errorRate"`
}

// System-level tenant information
type Tenant struct {
	ID        string            `json:"id"`
	Slug      string            `json:"slug"`
	Name      string            `json:"name"`
	Domain    *string           `json:"domain,omitempty"`
	Plan      *SubscriptionPlan `json:"plan"`
	Status    TenantStatus      `json:"status"`
	Settings  *string           `json:"settings,omitempty"`
	CreatedAt string            `json:"createdAt"`
	UpdatedAt string            `json:"updatedAt"`
}

type TenantConnection struct {
	Edges      []*TenantEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

type TenantEdge struct {
	Node   *Tenant `json:"node"`
	Cursor string  `json:"cursor"`
}

type TenantFilter struct {
	Status *TenantStatus `json:"status,omitempty"`
	Plan   *string       `json:"plan,omitempty"`
	Search *string       `json:"search,omitempty"`
}

type UpdateCustomerInput struct {
	Name    *string         `json:"name,omitempty"`
	Email   *string         `json:"email,omitempty"`
	Phone   *string         `json:"phone,omitempty"`
	Address *string         `json:"address,omitempty"`
	Company *string         `json:"company,omitempty"`
	Status  *CustomerStatus `json:"status,omitempty"`
	Tags    []string        `json:"tags,omitempty"`
	Notes   *string         `json:"notes,omitempty"`
}

type UpdateDepartmentInput struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	ManagerID   *string `json:"managerId,omitempty"`
}

type UpdateEmployeeInput struct {
	FirstName    *string         `json:"firstName,omitempty"`
	LastName     *string         `json:"lastName,omitempty"`
	Email        *string         `json:"email,omitempty"`
	Phone        *string         `json:"phone,omitempty"`
	DepartmentID *string         `json:"departmentId,omitempty"`
	Position     *string         `json:"position,omitempty"`
	Salary       *float64        `json:"salary,omitempty"`
	Status       *EmployeeStatus `json:"status,omitempty"`
	ManagerID    *string         `json:"managerId,omitempty"`
}

type UpdateProductCategoryInput struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	ParentID    *string `json:"parentId,omitempty"`
}

type UpdateProductInput struct {
	Name        *string        `json:"name,omitempty"`
	Description *string        `json:"description,omitempty"`
	Price       *float64       `json:"price,omitempty"`
	Cost        *float64       `json:"cost,omitempty"`
	CategoryID  *string        `json:"categoryId,omitempty"`
	Images      []string       `json:"images,omitempty"`
	Status      *ProductStatus `json:"status,omitempty"`
}

type UpdateRoleInput struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type UpdateUserInput struct {
	Email     *string     `json:"email,omitempty"`
	FirstName *string     `json:"firstName,omitempty"`
	LastName  *string     `json:"lastName,omitempty"`
	Avatar    *string     `json:"avatar,omitempty"`
	Status    *UserStatus `json:"status,omitempty"`
}

// User entity with multi-level RBAC
type User struct {
	ID          string         `json:"id"`
	TenantID    types.TenantID `json:"tenantId"`
	Email       string         `json:"email"`
	FirstName   string         `json:"firstName"`
	LastName    string         `json:"lastName"`
	Avatar      *string        `json:"avatar,omitempty"`
	Roles       []*Role        `json:"roles"`
	Status      UserStatus     `json:"status"`
	LastLoginAt *string        `json:"lastLoginAt,omitempty"`
	CreatedAt   string         `json:"createdAt"`
	UpdatedAt   string         `json:"updatedAt"`
}

func (User) IsTenantEntity()                  {}
func (this User) GetID() string               { return this.ID }
func (this User) GetTenantID() types.TenantID { return this.TenantID }
func (this User) GetCreatedAt() string        { return this.CreatedAt }
func (this User) GetUpdatedAt() string        { return this.UpdatedAt }

type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor string `json:"cursor"`
}

type UserFilter struct {
	Status *UserStatus `json:"status,omitempty"`
	Role   *string     `json:"role,omitempty"`
	Search *string     `json:"search,omitempty"`
}

type CRMActivityType string

const (
	CRMActivityTypeCustomerCreated       CRMActivityType = "CUSTOMER_CREATED"
	CRMActivityTypeCustomerUpdated       CRMActivityType = "CUSTOMER_UPDATED"
	CRMActivityTypeCustomerDeleted       CRMActivityType = "CUSTOMER_DELETED"
	CRMActivityTypeCustomerStatusChanged CRMActivityType = "CUSTOMER_STATUS_CHANGED"
	CRMActivityTypeNoteAdded             CRMActivityType = "NOTE_ADDED"
	CRMActivityTypeTaskCreated           CRMActivityType = "TASK_CREATED"
	CRMActivityTypeTaskCompleted         CRMActivityType = "TASK_COMPLETED"
)

var AllCRMActivityType = []CRMActivityType{
	CRMActivityTypeCustomerCreated,
	CRMActivityTypeCustomerUpdated,
	CRMActivityTypeCustomerDeleted,
	CRMActivityTypeCustomerStatusChanged,
	CRMActivityTypeNoteAdded,
	CRMActivityTypeTaskCreated,
	CRMActivityTypeTaskCompleted,
}

func (e CRMActivityType) IsValid() bool {
	switch e {
	case CRMActivityTypeCustomerCreated, CRMActivityTypeCustomerUpdated, CRMActivityTypeCustomerDeleted, CRMActivityTypeCustomerStatusChanged, CRMActivityTypeNoteAdded, CRMActivityTypeTaskCreated, CRMActivityTypeTaskCompleted:
		return true
	}
	return false
}

func (e CRMActivityType) String() string {
	return string(e)
}

func (e *CRMActivityType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CRMActivityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CRMActivityType", str)
	}
	return nil
}

func (e CRMActivityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CRMActivityType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CRMActivityType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type CustomerStatus string

const (
	CustomerStatusLead     CustomerStatus = "LEAD"
	CustomerStatusProspect CustomerStatus = "PROSPECT"
	CustomerStatusActive   CustomerStatus = "ACTIVE"
	CustomerStatusInactive CustomerStatus = "INACTIVE"
	CustomerStatusChurned  CustomerStatus = "CHURNED"
)

var AllCustomerStatus = []CustomerStatus{
	CustomerStatusLead,
	CustomerStatusProspect,
	CustomerStatusActive,
	CustomerStatusInactive,
	CustomerStatusChurned,
}

func (e CustomerStatus) IsValid() bool {
	switch e {
	case CustomerStatusLead, CustomerStatusProspect, CustomerStatusActive, CustomerStatusInactive, CustomerStatusChurned:
		return true
	}
	return false
}

func (e CustomerStatus) String() string {
	return string(e)
}

func (e *CustomerStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerStatus", str)
	}
	return nil
}

func (e CustomerStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CustomerStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CustomerStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type EmployeeStatus string

const (
	EmployeeStatusActive     EmployeeStatus = "ACTIVE"
	EmployeeStatusOnLeave    EmployeeStatus = "ON_LEAVE"
	EmployeeStatusTerminated EmployeeStatus = "TERMINATED"
	EmployeeStatusResigned   EmployeeStatus = "RESIGNED"
)

var AllEmployeeStatus = []EmployeeStatus{
	EmployeeStatusActive,
	EmployeeStatusOnLeave,
	EmployeeStatusTerminated,
	EmployeeStatusResigned,
}

func (e EmployeeStatus) IsValid() bool {
	switch e {
	case EmployeeStatusActive, EmployeeStatusOnLeave, EmployeeStatusTerminated, EmployeeStatusResigned:
		return true
	}
	return false
}

func (e EmployeeStatus) String() string {
	return string(e)
}

func (e *EmployeeStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmployeeStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmployeeStatus", str)
	}
	return nil
}

func (e EmployeeStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *EmployeeStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e EmployeeStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type HRMActivityType string

const (
	HRMActivityTypeEmployeeHired      HRMActivityType = "EMPLOYEE_HIRED"
	HRMActivityTypeEmployeeUpdated    HRMActivityType = "EMPLOYEE_UPDATED"
	HRMActivityTypeEmployeeTerminated HRMActivityType = "EMPLOYEE_TERMINATED"
	HRMActivityTypeDepartmentCreated  HRMActivityType = "DEPARTMENT_CREATED"
	HRMActivityTypeDepartmentUpdated  HRMActivityType = "DEPARTMENT_UPDATED"
	HRMActivityTypeLeaveRequest       HRMActivityType = "LEAVE_REQUEST"
	HRMActivityTypePerformanceReview  HRMActivityType = "PERFORMANCE_REVIEW"
)

var AllHRMActivityType = []HRMActivityType{
	HRMActivityTypeEmployeeHired,
	HRMActivityTypeEmployeeUpdated,
	HRMActivityTypeEmployeeTerminated,
	HRMActivityTypeDepartmentCreated,
	HRMActivityTypeDepartmentUpdated,
	HRMActivityTypeLeaveRequest,
	HRMActivityTypePerformanceReview,
}

func (e HRMActivityType) IsValid() bool {
	switch e {
	case HRMActivityTypeEmployeeHired, HRMActivityTypeEmployeeUpdated, HRMActivityTypeEmployeeTerminated, HRMActivityTypeDepartmentCreated, HRMActivityTypeDepartmentUpdated, HRMActivityTypeLeaveRequest, HRMActivityTypePerformanceReview:
		return true
	}
	return false
}

func (e HRMActivityType) String() string {
	return string(e)
}

func (e *HRMActivityType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HRMActivityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HRMActivityType", str)
	}
	return nil
}

func (e HRMActivityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *HRMActivityType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e HRMActivityType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ModuleType string

const (
	ModuleTypeCrm       ModuleType = "CRM"
	ModuleTypeHrm       ModuleType = "HRM"
	ModuleTypePos       ModuleType = "POS"
	ModuleTypeLms       ModuleType = "LMS"
	ModuleTypeFinance   ModuleType = "FINANCE"
	ModuleTypeInventory ModuleType = "INVENTORY"
)

var AllModuleType = []ModuleType{
	ModuleTypeCrm,
	ModuleTypeHrm,
	ModuleTypePos,
	ModuleTypeLms,
	ModuleTypeFinance,
	ModuleTypeInventory,
}

func (e ModuleType) IsValid() bool {
	switch e {
	case ModuleTypeCrm, ModuleTypeHrm, ModuleTypePos, ModuleTypeLms, ModuleTypeFinance, ModuleTypeInventory:
		return true
	}
	return false
}

func (e ModuleType) String() string {
	return string(e)
}

func (e *ModuleType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ModuleType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ModuleType", str)
	}
	return nil
}

func (e ModuleType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ModuleType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ModuleType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type NotificationType string

const (
	NotificationTypeInfo    NotificationType = "INFO"
	NotificationTypeWarning NotificationType = "WARNING"
	NotificationTypeError   NotificationType = "ERROR"
	NotificationTypeSuccess NotificationType = "SUCCESS"
	NotificationTypeSystem  NotificationType = "SYSTEM"
)

var AllNotificationType = []NotificationType{
	NotificationTypeInfo,
	NotificationTypeWarning,
	NotificationTypeError,
	NotificationTypeSuccess,
	NotificationTypeSystem,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeInfo, NotificationTypeWarning, NotificationTypeError, NotificationTypeSuccess, NotificationTypeSystem:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *NotificationType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e NotificationType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type POSActivityType string

const (
	POSActivityTypeProductCreated  POSActivityType = "PRODUCT_CREATED"
	POSActivityTypeProductUpdated  POSActivityType = "PRODUCT_UPDATED"
	POSActivityTypeProductDeleted  POSActivityType = "PRODUCT_DELETED"
	POSActivityTypeStockUpdated    POSActivityType = "STOCK_UPDATED"
	POSActivityTypeCategoryCreated POSActivityType = "CATEGORY_CREATED"
	POSActivityTypeSaleCompleted   POSActivityType = "SALE_COMPLETED"
	POSActivityTypeInventoryAlert  POSActivityType = "INVENTORY_ALERT"
)

var AllPOSActivityType = []POSActivityType{
	POSActivityTypeProductCreated,
	POSActivityTypeProductUpdated,
	POSActivityTypeProductDeleted,
	POSActivityTypeStockUpdated,
	POSActivityTypeCategoryCreated,
	POSActivityTypeSaleCompleted,
	POSActivityTypeInventoryAlert,
}

func (e POSActivityType) IsValid() bool {
	switch e {
	case POSActivityTypeProductCreated, POSActivityTypeProductUpdated, POSActivityTypeProductDeleted, POSActivityTypeStockUpdated, POSActivityTypeCategoryCreated, POSActivityTypeSaleCompleted, POSActivityTypeInventoryAlert:
		return true
	}
	return false
}

func (e POSActivityType) String() string {
	return string(e)
}

func (e *POSActivityType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = POSActivityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid POSActivityType", str)
	}
	return nil
}

func (e POSActivityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *POSActivityType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e POSActivityType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ProductStatus string

const (
	ProductStatusActive       ProductStatus = "ACTIVE"
	ProductStatusInactive     ProductStatus = "INACTIVE"
	ProductStatusOutOfStock   ProductStatus = "OUT_OF_STOCK"
	ProductStatusDiscontinued ProductStatus = "DISCONTINUED"
)

var AllProductStatus = []ProductStatus{
	ProductStatusActive,
	ProductStatusInactive,
	ProductStatusOutOfStock,
	ProductStatusDiscontinued,
}

func (e ProductStatus) IsValid() bool {
	switch e {
	case ProductStatusActive, ProductStatusInactive, ProductStatusOutOfStock, ProductStatusDiscontinued:
		return true
	}
	return false
}

func (e ProductStatus) String() string {
	return string(e)
}

func (e *ProductStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductStatus", str)
	}
	return nil
}

func (e ProductStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ProductStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ProductStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type TenantStatus string

const (
	TenantStatusActive    TenantStatus = "ACTIVE"
	TenantStatusSuspended TenantStatus = "SUSPENDED"
	TenantStatusTrial     TenantStatus = "TRIAL"
	TenantStatusExpired   TenantStatus = "EXPIRED"
)

var AllTenantStatus = []TenantStatus{
	TenantStatusActive,
	TenantStatusSuspended,
	TenantStatusTrial,
	TenantStatusExpired,
}

func (e TenantStatus) IsValid() bool {
	switch e {
	case TenantStatusActive, TenantStatusSuspended, TenantStatusTrial, TenantStatusExpired:
		return true
	}
	return false
}

func (e TenantStatus) String() string {
	return string(e)
}

func (e *TenantStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TenantStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TenantStatus", str)
	}
	return nil
}

func (e TenantStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TenantStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TenantStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type UserStatus string

const (
	UserStatusActive    UserStatus = "ACTIVE"
	UserStatusInactive  UserStatus = "INACTIVE"
	UserStatusSuspended UserStatus = "SUSPENDED"
)

var AllUserStatus = []UserStatus{
	UserStatusActive,
	UserStatusInactive,
	UserStatusSuspended,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusActive, UserStatusInactive, UserStatusSuspended:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UserStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UserStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
