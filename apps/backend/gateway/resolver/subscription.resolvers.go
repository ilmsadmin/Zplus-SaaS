package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"

	"github.com/ilmsadmin/Zplus-SaaS/apps/backend/gateway/generated"
)

// TenantUpdated is the resolver for the tenantUpdated field.
func (r *subscriptionResolver) TenantUpdated(ctx context.Context) (<-chan *generated.Tenant, error) {
	panic(fmt.Errorf("not implemented: TenantUpdated - tenantUpdated"))
}

// SystemMetrics is the resolver for the systemMetrics field.
func (r *subscriptionResolver) SystemMetrics(ctx context.Context) (<-chan *generated.SystemMetrics, error) {
	panic(fmt.Errorf("not implemented: SystemMetrics - systemMetrics"))
}

// UserUpdated is the resolver for the userUpdated field.
func (r *subscriptionResolver) UserUpdated(ctx context.Context) (<-chan *generated.User, error) {
	panic(fmt.Errorf("not implemented: UserUpdated - userUpdated"))
}

// CustomerUpdated is the resolver for the customerUpdated field.
func (r *subscriptionResolver) CustomerUpdated(ctx context.Context) (<-chan *generated.Customer, error) {
	panic(fmt.Errorf("not implemented: CustomerUpdated - customerUpdated"))
}

// EmployeeUpdated is the resolver for the employeeUpdated field.
func (r *subscriptionResolver) EmployeeUpdated(ctx context.Context) (<-chan *generated.Employee, error) {
	panic(fmt.Errorf("not implemented: EmployeeUpdated - employeeUpdated"))
}

// ProductUpdated is the resolver for the productUpdated field.
func (r *subscriptionResolver) ProductUpdated(ctx context.Context) (<-chan *generated.Product, error) {
	panic(fmt.Errorf("not implemented: ProductUpdated - productUpdated"))
}

// Notifications is the resolver for the notifications field.
func (r *subscriptionResolver) Notifications(ctx context.Context) (<-chan *generated.Notification, error) {
	panic(fmt.Errorf("not implemented: Notifications - notifications"))
}

// CrmActivity is the resolver for the crmActivity field.
func (r *subscriptionResolver) CrmActivity(ctx context.Context) (<-chan *generated.CRMActivity, error) {
	panic(fmt.Errorf("not implemented: CrmActivity - crmActivity"))
}

// HrmActivity is the resolver for the hrmActivity field.
func (r *subscriptionResolver) HrmActivity(ctx context.Context) (<-chan *generated.HRMActivity, error) {
	panic(fmt.Errorf("not implemented: HrmActivity - hrmActivity"))
}

// PosActivity is the resolver for the posActivity field.
func (r *subscriptionResolver) PosActivity(ctx context.Context) (<-chan *generated.POSActivity, error) {
	panic(fmt.Errorf("not implemented: PosActivity - posActivity"))
}

// LiveStats is the resolver for the liveStats field.
func (r *subscriptionResolver) LiveStats(ctx context.Context) (<-chan *generated.LiveStats, error) {
	panic(fmt.Errorf("not implemented: LiveStats - liveStats"))
}

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
